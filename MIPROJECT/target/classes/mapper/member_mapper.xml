<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.etoile.app.member.mapper.MemberMapper">
	<!-- 회원 전체 조회 -->
	<select id="memberList" resultType="MemberVO">
	SELECT a.* FROM ( SELECT b.*, rownum rn from (
		SELECT member_id,
			   password,
			   name,
			   phone,
			   email,
			   address,
			   grade
		  FROM member
		<where>
			<!-- 개인고객만 조회할 경우 -->
			<if test="grade == 'MEMBER'"> grade IN ('VISIT', 'VIP', 'VIP')</if>
			<!-- 각 등급별 조회할 경우 -->
			<if test="grade == 'VISIT' or grade == 'VIP' or grade == 'VVIP' or grade == 'BUSINESS'" >grade = #{grade}</if>
		</where> 
	) b ) a WHERE rn BETWEEN #{start} AND #{end}
	</select>
	
	<!-- 회원 상세 조회 -->
	<select id="memberSelect" resultType="MemberVO">
		SELECT member_id,
			   password,
			   name,
			   phone,
			   email,
			   address,
			   grade
		  FROM member
		 WHERE member_id = #{memberId}
	</select>
	
	<!-- 회원 등록 -->
	<insert id="memberInsert">
		INSERT INTO member (member_id,
			   				password,
			   				name,
			   				phone,
			   				email,
			   				address,
			   				grade)
			   		 VALUES (#{memberId},
			   		 		 #{password},
			   		 		 #{name},
			   		 		 #{phone},
			   		 		 #{email},
			   		 		 #{address},
			   		 		 #{grade})
	</insert>
	
	<!-- 회원 정보 수정 -->
	<update id="memberUpdate">
		UPDATE member 
			<set>
				<if test="password != null">password = #{password},</if>
				<if test="phone != null">phone = #{phone},</if>
				<if test="email != null">email = #{email},</if>
				<if test="address != null">address = #{address},</if>
				<if test="grade != null">grade = #{grade},</if>
			</set>
			WHERE member_id = #{memberId}
	</update>
	
	<!-- 아이디 중복여부 체크 -->
	<select id="idChecked" resultType="Integer">
		SELECT count(*)
		  FROM member
		 WHERE member_id = #{memberId}
	</select>
	
	<!-- 로그인 -->
	<select id="login" resultType="Integer">
		SELECT count(*)
		  FROM member
		 WHERE member_id = #{memberId}
		   AND password = #{password}
	</select>
	
	<!-- 페이징을 위한 멤버 카운트 -->
	<select id="memberCount" resultType="Integer">
		SELECT count(*)
		  FROM member
		<where>
			<!-- 개인고객만 조회할 경우 -->
			<if test="grade == 'MEMBER'"> grade IN ('VISIT', 'VIP', 'VIP')</if>
			<!-- 각 등급별 조회할 경우 -->
			<if test="grade == 'VISIT' or grade == 'VIP' or grade == 'VIP' or grade == 'BUSINESS'" >grade = #{grade}</if>
		</where>
	</select>
	
	<!-- 등급별 조건 및 혜택 조회 -->
	<select id="gradeCoupon" resultType="GradeVO">
		SELECT grade,
			   grade_condition,
			   grade_benefit
		  FROM grade
		<where>
			<if test="grade !=null and grade !=''">grade = #{grade}</if>
		</where>
	</select>
	
	<!-- 쿠폰 조회 -->
	<select id="couponList" resultType="CouponVO">
		SELECT coupon_id
			   member_id,
			   coupon_sort,
			   grade_coupon,
			   funding_coupon,
			   coupon_used
		  FROM coupon
		<where>
			<if test="memberId != null and memberId !=''">member_id = #{memberId}</if>
		</where>
	</select>
	
	<!-- 쿠폰 등록 -->
	<insert id="couponInsert">
		INSERT INTO coupon (coupon_id,
			   				member_id,
			   				coupon_sort,
			   				grade_coupon,
			   				funding_coupon,
			   				coupon_used)
			   		VALUES(coupon_seq.nextval,
			   			   #{memberId},
			   			   #{couponSort},
			   			   #{gradeCoupon},
			   			   #{fundingCoupon},
			   			   #{couponUsed})
	</insert>
	
	<!-- 쿠폰 수정 0:미사용, 1:사용 -->
	<update id="couponUpdate">
		UPDATE coupon
		<set> 
			<if test="couponSort != null and couponSort !=''">coupon_sort = #{couponSort},</if>
			<if test="gradeCoupon != null and gradeCoupon !=''">grade_coupon = #{gradeCoupon},</if>
			<if test="fundingCoupon != null and fundingCoupon !=''">funding_coupon = #{fundingCoupon},</if>
			<if test="couponUsed != null and couponUsed !=''">coupon_used = #{couponUsed},</if>
		</set>
		WHERE member_id = #{memberId} AND coupon_id = #{couponId}
	</update>
	
	<!-- 쿠폰 삭제 -->	
	<delete id="couponDelete">
		DELETE coupon 
		 WHERE member_id = #{memberId} AND coupon_id = #{couponId}
	</delete>
	
	<!-- 고객별 대여이력 조회 -->
	<select id="memberRentalList" resultType="com.etoile.app.member.common.RecordVO">
		SELECT p.product_name, 
			   p.product_type,
			   p.ppl,
			   r.rental_id,
			   r.member_id,
			   r.rental_start, 
			   r.rental_end, 
			   r.rental_pay 
		  FROM product p, rental r 
		 WHERE p.product_id = r.product_id 
		   <if test="memberId != null and memberId !=''">AND member_id= #{memberId}</if>
		   AND rental_waybill is null
	 	 ORDER BY r.rental_start
	 </select> 	
</mapper>