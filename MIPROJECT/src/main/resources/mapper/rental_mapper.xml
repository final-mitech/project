<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.etoile.app.rental.mapper.RentalMapper">
	
	<!-- 물품리스트 출력+페이징 -->
	<select id="rentalProductList" resultType="productVO" parameterType="productVO">
		SELECT b.* FROM (SELECT a.*, rownum rnum  FROM (
		SELECT * FROM PRODUCT where product_status like 'waiting') a ) b
		where rnum between #{start} and #{end}
	</select>
	
	<!-- product테이블 총 데이터수량 조회 -->
	<select id="productCnt" resultType="int">
		SELECT count(*) from product
		<where>
			<if test="productName != null">
				product_name like '%' || #{productName} || '%'
			</if>
			product_status like 'waiting'
		</where>
	</select>
	
	<!-- 물품상세조회 -->
	<select id="rentalProductSelect" resultType="productVO">
		SELECT * FROM PRODUCT WHERE product_id = #{productId}
	</select>
	
	<!-- 물품리스트 검색 -->
	<select id="searchList" resultType="productVO">
		SELECT b.* FROM (SELECT a.*, rownum rnum  FROM (
		SELECT * FROM PRODUCT WHERE product_name like '%' || #{productName} || '%' ) a ) b
		where rnum between #{start} and #{end}
	</select>
	
	<!-- 고객마이페이지 rental -->
	<select id="rentalList" resultType="RentalVO">
		select * from rental r, product p
		where p.product_id = r.product_id
		and member_id like #{memberId}
		order by R.RENTAL_START desc
	</select>
	
	<!-- 마이페이지 pick조회 -->
	<select id="pickList" resultType="pickVO">
		SELECT * from product pr, pick pi
		where pr.product_id = pi.product_id
		and member_id like #{memberId}
		order by pi.pick_id desc
	</select>
		
	<!-- 결제완료시 rental테이블 정보입력 -->
	<insert id="RentalInsert">
		insert into rental(rental_id, member_id, product_id, rental_start, rental_end, rental_address, rental_pay)
		values (r_seq.nextval, #{memberId}, #{productId}, #{rentalStart}, #{rentalEnd}, #{rentalAddress}, #{rentalPay})
	</insert>
	<!-- 대여하며 쿠폰사용 유무 체크 -->
	<update id="usedCoupon">
		UPDATE coupon
		SET coupon_used = 1
		WHERE coupon_id = #{couponId}
	</update>
	<!-- pick여부조회 -->
	<select id="selectPick" resultType="int">
		select count(*) from pick 
		where product_id like #{productId}
		and member_id like #{memberId}
	</select>
	
	<!-- pick등록 -->
	<insert id="productPickInsert">
		insert into pick (pick_id, product_id, member_id) values (pi_seq.nextval, #{productId}, #{memberId})
	</insert>
	<!-- pick취소 -->
	<delete id="pickDelete">
		delete from pick 
		where product_id like #{productId}
		and member_id like #{memberId}
	</delete>
	
	<!-- 관리자 rental -->
	<select id="allRentalList" resultType="RentalVO">
		select * from ( select r.*, pr.product_name, pr.ppl
						from product pr, rental r 
						where pr.product_id = r.product_id ) a, member m
		where a.member_id = m.member_id
		and rental_waybill is null
		order by rental_id
	</select>
	<!-- 관리자페이지 회수조회 -->
	<select id="rentalReList" resultType="RentalVO">
		select * from ( select r.*, pr.product_name, pr.ppl, pr.product_status
						from product pr, rental r 
						where pr.product_id = r.product_id ) a, member m
		where a.member_id = m.member_id
		and rental_waybill is not null
		and product_status = 'rental'
	</select>
	
	<!-- 송장등록시 정보업데이트  -->
	<update id="updateWaybill">
		UPDATE rental
		SET rental_waybill = #{rentalWaybill}
		WHERE rental_id = #{rentalId}
	</update>
	<update id="updateStatus">
		UPDATE product
		SET product_status = 'rental'
		WHERE product_id = #{productId}
	</update>
	
	<!-- 상품회수완료변경 -->
	<update id="rentalProductStatus">
		UPDATE product 
		SET   product_status = #{productStatus} 
		where product_id = (SELECT product_id FROM  rental where rental_id = #{rentalId} ) 
	</update>
	
	
</mapper>